#!/usr/bin/env ruby
# Encoding: utf-8

require 'tzinfo'

ICON_PATH="#{ENV['HOME']}/.dzen/xbm8x8/"
DZENCMD=%{dzen2 -xs 1 -expand l}

module Dzen
  def dzen command, arg=""
    "^#{command}(#{arg})"
  end
  def icon name
    dzen(:i, icon_path(name))
  end
  def icon_path name
    File.join(ICON_PATH, "#{name}.xbm")
  end
  def click button, command, content
    "^ca(#{button},#{command})#{content}^ca()"
  end
end

class StatusApp
  include Dzen
  def initialize *args
    @args = args
  end
end

class Battery < StatusApp
  def label
    _, status = `acpi -b`.chomp.split(/: */, 2)
    status, level, time = (status || "").split(/, */)
    time = time[/[\d]*:[\d]*/] if time
    _, ico = {10 => :empty, 40 => :low, 80 => :med, 1000 => :full}.detect do |(charge, _)|
      (level || 0).to_i < charge
    end
    status = "Charging" if 1 == open('/sys/class/power_supply/AC/online').read.to_i
    ico = "bat_#{ico}_01"
    ico = 'ac_01' if status == "Charging"
    "#{icon ico} #{level} #{time}"
  end
end

class Volume < StatusApp
  def label
    mixer = @args[0]
    status = `amixer get #{mixer}`

    level = status[/\d+%/]
    state = status[/\[(on|off)\]/, 1]
    content = state == 'on' ? ("%3i%" % level.to_i) : 'mute'

    content = "#{icon 'phones'} #{content}"
    content = click(1, "amixer -q set #{mixer} toggle", content)
    content = click(4, "amixer -q set #{mixer} 5%+", content)
    content = click(5, "amixer -q set #{mixer} 5%-", content)
  end
end

class Clock < StatusApp
  def tz
    @tz ||= @args[0] ? TZInfo::Timezone.get(@args[0]) : Time
  end
  def label
    t = tz.now
    time = t.strftime("%H:%M:%S")
    "#{icon 'clock'} #{time}"
  end
end

class Wireless < StatusApp
  def label
    device = 'wlan0'
    iwconfig = `iwconfig #{device}`
    lq = iwconfig[/Link Quality=([\/\d]*)/, 1]
    essid = iwconfig[/ESSID:\"([^"]*)\"/, 1]
    content = "#{icon 'wifi_01'} #{essid} #{lq}"
    content = click(1, 'sudo systemctl restart net-auto-wireless.service', content)
  end
end

class Mpd < StatusApp
  def label
    content = `mpc current`.strip
    if content
      content = "#{icon 'note'} #{content}"
      content = click(1, 'mpc toggle', content)
    end
  end
end

class Maildir < StatusApp
  def label
    mailcount = Dir["#{@args[0]}/new/*"].count
    content = "#{icon 'mail'} #{mailcount}"
    click(1, 'urxvt -e mutt', content)
  end
end

class Statusbar
  def initialize
    @apps = [
      Wireless.new,
      Maildir.new("#{ENV['HOME']}/mail/INBOX"),
      Battery.new,
      Mpd.new,
      Volume.new('Master'),
      # Clock.new('America/Vancouver'),
      Clock.new
    ]
  end
  def output
    #STDOUT
    @output ||= open("|#{DZENCMD} -xs 1", 'w')
  end
  def print_line
    output.puts @apps.map { |app| app.label }.join(" Â· ")
    output.flush
  end
  def run
    loop do
      print_line
      sleep 1
    end
  end
end

Statusbar.new.run
